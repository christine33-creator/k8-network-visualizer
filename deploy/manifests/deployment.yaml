apiVersion: v1
kind: Namespace
metadata:
  name: network-visualizer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: network-visualizer
  namespace: network-visualizer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: network-visualizer
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "services", "endpoints", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"] # For running probes inside pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: network-visualizer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: network-visualizer
subjects:
- kind: ServiceAccount
  name: network-visualizer
  namespace: network-visualizer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-visualizer
  namespace: network-visualizer
  labels:
    app: network-visualizer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network-visualizer
  template:
    metadata:
      labels:
        app: network-visualizer
    spec:
      serviceAccountName: network-visualizer
      containers:
      - name: backend
        image: christine33creator/k8s-network-visualizer:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PROBE_INTERVAL
          value: "30s"
        - name: ENABLE_UI
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: network-visualizer
  namespace: network-visualizer
  labels:
    app: network-visualizer
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: network-visualizer
---
# Optional: Ingress for AKS with Application Gateway
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: network-visualizer
  namespace: network-visualizer
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - network-viz.yourdomain.com
    secretName: network-visualizer-tls
  rules:
  - host: network-viz.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: network-visualizer
            port:
              number: 80